version: 2
jobs:
  build:
    working_directory: ~/circulate
    docker:
      # - image: elasticsearch
      - image: circleci/python:2.7
        # environment:
          # FLASK_CONFIG: testing
    steps:
      - checkout
      - restore_cache:
          key: deps-a-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          name: Install requirements.txt
          command: |
            pip install virtualenv
            virtualenv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - save_cache:
          key: deps-a-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      - run:
          name: Run tests that do not depend on ES
          command: |
            . venv/bin/activate
            python -m pytest
      # - store_artifacts:
          # path: test-reports/
          # destination: tr1
      # - store_test_results:
          # path: test-reports/

  push-containers:
    docker:
      - image: circleci/python:2.7
    working_directory: ~/circulate
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            docker build -t circle-${CIRCLE_SHA1} -f docker/Dockerfile .
      - run:
          name: Push to Quay
          command: |
            docker login -u="opentargets+quaybot" -p="${QUAYBOT_PASSWORD}" quay.io
            ## branch tag and push
            docker tag circle-${CIRCLE_SHA1} ${QUAY_REPO}:${CIRCLE_BRANCH}
            docker push ${QUAY_REPO}:${CIRCLE_BRANCH}
            ## sha commit push
            docker tag ${QUAY_REPO}:${CIRCLE_BRANCH} ${QUAY_REPO}:circle-${CIRCLE_SHA1}
            docker push ${QUAY_REPO}:circle-${CIRCLE_SHA1}
            ## push latest if master
            if [ "$CIRCLE_BRANCH" = "master" ] 
              then
                docker tag ${QUAY_REPO}:${CIRCLE_BRANCH} ${QUAY_REPO}:latest
                docker push ${QUAY_REPO}:latest
            fi

  deploy:
    working_directory: ~/circulate
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run:
          name: Decode Google Cloud Credentials
          command: echo ${GOOGLE_AUTH} | base64 -i --decode > ${HOME}/gcp-key.json
      - run:
          name: Authenticate to Google Cloud
          command: |
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
      # - run:
      #     name: configure google cloud endpoints
      #     command: |
      #       cd app/static/docs/swagger 
      #       echo ">> Checking if swagger.yaml is one of the files changed in the *latest* commit"
      #       echo ">> WARNING: you may have to run this manually if swagger.yaml was changed in an earlier commit, even if it was all a single push"
      #       git diff-tree --no-commit-id --name-only -r HEAD 
      #       git diff-tree --no-commit-id --name-only -r HEAD | while read filename; do
      #         if [ "$filename" == "app/static/docs/swagger/swagger.yaml" ]; then
      #           echo ">> swagger.yaml changed. redeploying endpoints configuration..."
      #           echo gcloud service-management deploy swagger.yaml
      #         else
      #           echo ">> swagger.yaml not changed in the latest commit."
      #           echo ">> Keeping the same Endpoints configuration"
      #         fi
      #       done 
      - run:
          name: Substitute ENV vars for deploy (EU dev)
          environment: 
            ES_URL: http://10.132.0.9:9200
            GCENDPOINT_URL: open-targets-eu-dev.appspot.com
            GCENDPOINT_VERSION: 2017-07-07r1
            DEPLOYED_DATA_VERSION: 17.06.2
          command: |
            bash .circleci/render.sh app.yaml.template > ~/circulate/app.yaml
      - run:
          name: Deploy branch to google AppEngine
          #NOTE: this creates another docker container with a uWSGI app and no NGINX in front
          command: |
            gcloud app deploy --no-promote --version $CIRCLE_BRANCH --project open-targets-eu-dev

  api-tests:
    docker:
      - image: circleci/python:2.7
    working_directory: ~/circulate
    steps:
      - checkout
      - run:
          name: Install requests library
          command: |
            pip install virtualenv
            virtualenv venv
            . venv/bin/activate
            pip install -r .circleci/runscope/requirements.txt
      - run:
          name: Wait for appengine deployment
          command: |
            export DEPLOYEDURL=${CIRCLE_BRANCH}-dot-${GOOGLE_PROJECT_ID}.appspot.com
            until $(curl --output /dev/null --silent --head --fail https://${DEPLOYEDURL}/api/latest/public/utils/version); do
            printf '.'
            sleep 20
            done

      - run:
          name: Trigger runscope tests on deployed branch
          command: |
            export DEPLOYEDURL=${CIRCLE_BRANCH}-dot-${GOOGLE_PROJECT_ID}.appspot.com
            . venv/bin/activate
            python .circleci/runscope/app.py "https://api.runscope.com/radar/${RUNSCOPE_TEST_UUID}/trigger?runscope_environment=${RUNSCOPE_ENV_UUID_EU_DEV}&host=${DEPLOYEDURL}"

  deploy-prod-eu:
    working_directory: ~/circulate
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run:
          name: Decode Google Cloud Credentials
          command: echo ${GOOGLE_AUTH} | base64 -i --decode > ${HOME}/gcp-key.json
      - run:
          name: Authenticate to Google Cloud
          command: |
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json

      - run:
          name: Substitute ENV vars for deploy (EU prod)
          # PRODUCTION EU elasticsearch
          environment: 
            ES_URL: http://35.195.41.74:39200
            GCENDPOINT_URL: open-targets-eu-dev.appspot.com
            GCENDPOINT_VERSION: 2017-07-07r1
            DEPLOYED_DATA_VERSION: 17.06.2
          command: |
            bash .circleci/render.sh app.yaml.template > ~/circulate/app.yaml
      - run:
          name: Deploy branch to google AppEngine (EU prod)
          command: |
            #need to define CIRCLE_TAG (see https://discuss.circleci.com/t/builds-using-git-tags-failing/14904/2)
            CIRCLE_TAG="$(git tag -l --points-at HEAD)"
            gcloud app deploy --no-promote --version $CIRCLE_TAG --project open-targets-api-prod-eu
      
  deploy-prod-us:
    working_directory: ~/circulate
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run:
          name: Decode Google Cloud Credentials
          command: echo ${GOOGLE_AUTH} | base64 -i --decode > ${HOME}/gcp-key.json
      - run:
          name: Authenticate to Google Cloud
          command: |
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json

      - run:
          name: Substitute ENV vars for deploy (US prod)
          environment: 
            ES_URL: http://10.142.0.3:9200
            GCENDPOINT_URL: open-targets-eu-dev.appspot.com
            GCENDPOINT_VERSION: 2017-07-07r1
            DEPLOYED_DATA_VERSION: 17.06.2
          command: |
            bash .circleci/render.sh app.yaml.template > ~/circulate/app.yaml
      - run:
          name: Deploy branch to google AppEngine (US prod)
          command: |
            #need to define CIRCLE_TAG (see https://discuss.circleci.com/t/builds-using-git-tags-failing/14904/2)
            CIRCLE_TAG="$(git tag -l --points-at HEAD)"
            gcloud app deploy --no-promote --version $CIRCLE_TAG --project open-targets-api-prod-us
      

  api-tests-prod-eu:
    docker:
      - image: circleci/python:2.7
    working_directory: ~/circulate
    steps:
      - checkout
      - run:
          name: Install requests library
          command: |
            pip install virtualenv
            virtualenv venv
            . venv/bin/activate
            pip install -r .circleci/runscope/requirements.txt
      - run:
          name: Wait for appengine deployment (EU)
          command: |
            export DEPLOYEDURL=${CIRCLE_TAG}-dot-open-targets-api-prod-eu.appspot.com
            until $(curl --output /dev/null --silent --head --fail https://${DEPLOYEDURL}/api/latest/public/utils/version); do
            printf '.'
            sleep 20
            done

      - run:
          name: Trigger runscope tests on deployed branch (EU)
          command: |
            export DEPLOYEDURL=${CIRCLE_TAG}-dot-open-targets-api-prod-eu.appspot.com
            . venv/bin/activate
            python .circleci/runscope/app.py "https://api.runscope.com/radar/${RUNSCOPE_TEST_UUID}/trigger?runscope_environment=${RUNSCOPE_ENV_UUID_EU_DEV}&host=${DEPLOYEDURL}"
      

  api-tests-prod-us:
    docker:
      - image: circleci/python:2.7
    working_directory: ~/circulate
    steps:
      - checkout
      - run:
          name: Install requests library
          command: |
            pip install virtualenv
            virtualenv venv
            . venv/bin/activate
            pip install -r .circleci/runscope/requirements.txt

      - run:
          name: Wait for appengine deployment (US)
          command: |
            export DEPLOYEDURL=${CIRCLE_TAG}-dot-open-targets-api-prod-us.appspot.com
            until $(curl --output /dev/null --silent --head --fail https://${DEPLOYEDURL}/api/latest/public/utils/version); do
            printf '.'
            sleep 20
            done

      - run:
          name: Trigger runscope tests on deployed branch (US)
          command: |
            export DEPLOYEDURL=${CIRCLE_TAG}-dot-open-targets-api-prod-us.appspot.com
            . venv/bin/activate
            python .circleci/runscope/app.py "https://api.runscope.com/radar/${RUNSCOPE_TEST_UUID}/trigger?runscope_environment=${RUNSCOPE_ENV_UUID_EU_DEV}&host=${DEPLOYEDURL}"


workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - build
      - push-containers:
          requires:
            - build	
      - deploy:
          requires:
            - build
      - api-tests:
          requires:
            - deploy
      
      - holdprod:
         type: approval
         requires:
           - api-tests
      - deploy-prod-eu:
          requires:
            - holdprod
          filters:
            tags:
              only: /^prod.*/
      - deploy-prod-us:
          requires:
            - holdprod
          filters:
            tags:
              only: /^prod.*/
      - api-tests-prod-eu:
          requires:
            - deploy-prod-eu
          filters:
            tags:
              only: /^prod.*/
      - api-tests-prod-us:
          requires:
            - deploy-prod-us
          filters:
            tags:
              only: /^prod.*/


