version: 2
jobs:
  build:
    working_directory: ~/circulate
    docker:
      # - image: elasticsearch
      - image: circleci/python:2.7
        # environment:
          # FLASK_CONFIG: testing
    steps:
      - checkout
      - restore_cache:
          key: deps-a-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          name: Install requirements.txt
          command: |
            pip install virtualenv
            virtualenv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - save_cache:
          key: deps-a-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      - run:
          name: Run tests that do not depend on ES
          command: |
            . venv/bin/activate
            python -m pytest
      # - store_artifacts:
          # path: test-reports/
          # destination: tr1
      # - store_test_results:
          # path: test-reports/

  push-containers:
    docker:
      - image: circleci/python:2.7
    environment:
      QUAY_REPO: quay.io/opentargets/rest_api
      GCR_REPO: eu.gcr.io/open-targets-eu-dev/rest_api
    working_directory: ~/circulate
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            docker build -t circle-${CIRCLE_SHA1} -f docker/Dockerfile .
      - run:
          name: Push to Google Container Registry (gcr.io)
          command: |
            echo ${GOOGLE_AUTH} | base64 -i --decode > ${HOME}/gcp-key.json
            docker login -u _json_key -p "$(cat ${HOME}/gcp-key.json)" https://eu.gcr.io
            ## branch tag and push
            docker tag circle-${CIRCLE_SHA1} ${GCR_REPO}:${CIRCLE_BRANCH}
            docker push ${GCR_REPO}:${CIRCLE_BRANCH}
            ## sha commit push
            docker tag ${GCR_REPO}:${CIRCLE_BRANCH} ${GCR_REPO}:circle-${CIRCLE_SHA1}
            docker push ${GCR_REPO}:circle-${CIRCLE_SHA1}
            ## push latest if master
            if [ "$CIRCLE_BRANCH" = "master" ] 
              then
                docker tag ${GCR_REPO}:${CIRCLE_BRANCH} ${GCR_REPO}:latest
                docker push ${GCR_REPO}:latest
            fi
      - run:
          name: Push to Quay
          command: |
            docker login -u="opentargets+quaybot" -p="${QUAYBOT_PASSWORD}" quay.io
            ## branch tag and push
            docker tag circle-${CIRCLE_SHA1} ${QUAY_REPO}:${CIRCLE_BRANCH}
            docker push ${QUAY_REPO}:${CIRCLE_BRANCH}
            ## sha commit push
            docker tag ${QUAY_REPO}:${CIRCLE_BRANCH} ${QUAY_REPO}:circle-${CIRCLE_SHA1}
            docker push ${QUAY_REPO}:circle-${CIRCLE_SHA1}
            ## push latest if master
            if [ "$CIRCLE_BRANCH" = "master" ] 
              then
                docker tag ${QUAY_REPO}:${CIRCLE_BRANCH} ${QUAY_REPO}:latest
                docker push ${QUAY_REPO}:latest
            fi
  deploy:
    working_directory: ~/circulate
    docker:
      - image: google/cloud-sdk
    environment:
      GOOGLE_PROJECT_ID: open-targets-eu-dev
      GCR_REPO: eu.gcr.io/open-targets-eu-dev/rest_api
      ES_URL: http://10.132.0.3:9200
      DEPLOYED_DATA_VERSION: mkes5.2
      MAX_NUM_INSTANCES: 1
      CPU: 2
      MEMORY_GB: 2
      DISK_SIZE_GB: 30
    steps:
      - checkout
      - run: 
          name: install jq & envsubst
          command: apt-get install -y jq gettext-base && jq --version

      - run:
          name: Decode Google Cloud Credentials
          command: echo ${GOOGLE_AUTH} | base64 -i --decode > ${HOME}/gcp-key.json
      - run:
          name: Authenticate to Google Cloud
          command: |
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json

      - run: 
          name: Deploy to google endpoints (if a new branch or a new version)
          command: |
            set -o allexport
            echo -e "### Reading api version from VERSION file ..."
            source VERSION
            echo "major: $API_VERSION"
            echo "minor: $API_VERSION_MINOR"

            source .circleci/sortendpt.sh
            
            #make it available
            echo -e "\n\n### Substituting the config id [ ${GCENDPOINT_VERSION} ] in the appEngine yaml \n\n"
            envsubst < app.template.yaml > app.yaml

 
      - run:
          name: Deploy branch to google AppEngine
          #NOTE: this creates another docker container with a uWSGI app and no NGINX in front
          
          #TODO: deploy the container we build above instead to speed up deployment
          # eg. 
          # gcloud app deploy --image-url ${GCR_REPO}:${CIRCLE_BRANCH} 

          command: |
            gcloud app deploy --no-promote --version $CIRCLE_BRANCH --project ${GOOGLE_PROJECT_ID}

  api-tests:
    docker:
      - image: circleci/python:2.7
    environment:
      GOOGLE_PROJECT_ID: open-targets-eu-dev
    working_directory: ~/circulate
    steps:
      - checkout
      - run:
          name: Install requests library
          command: |
            pip install virtualenv
            virtualenv venv
            . venv/bin/activate
            pip install -r .circleci/runscope/requirements.txt
      - run:
          name: Wait for appengine deployment
          command: |
            set -o allexport
            source VERSION
            DEPLOYEDURL=${CIRCLE_BRANCH}-dot-${GOOGLE_PROJECT_ID}.appspot.com/v${API_VERSION}/platform
            until $(curl --output /dev/null --silent --head --fail https://${DEPLOYEDURL}/public/utils/version) || (( count++ >= 10 )); do
              printf '.'
              sleep 20
            done

      - run:
          name: Trigger runscope tests on deployed branch
          command: |
            set -o allexport
            source VERSION
            DEPLOYEDURL=${CIRCLE_BRANCH}-dot-${GOOGLE_PROJECT_ID}.appspot.com
            BASEPATH=/v${API_VERSION}/platform
            . venv/bin/activate
            python .circleci/runscope/app.py "https://api.runscope.com/radar/${RUNSCOPE_TEST_UUID}/trigger?runscope_environment=${RUNSCOPE_ENV_UUID_EU_DEV}&host=${DEPLOYEDURL}&basePath=${BASEPATH}"


  deploy-staging:
    working_directory: ~/circulate
    docker:
      - image: google/cloud-sdk
    environment:
      GOOGLE_PROJECT_ID: open-targets-staging
      GCR_REPO: eu.gcr.io/open-targets-eu-dev/rest_api
      ES_URL: http://10.132.0.9:9200
      DEPLOYED_DATA_VERSION: mkes5.2
      MAX_NUM_INSTANCES: 1
      CPU: 2
      MEMORY_GB: 2
      DISK_SIZE_GB: 30
    steps:
      - checkout
      - run: 
          name: install jq & envsubst
          command: apt-get install -y jq gettext-base && jq --version

      - run:
          name: Decode Google Cloud Credentials
          command: echo ${GOOGLE_AUTH} | base64 -i --decode > ${HOME}/gcp-key.json
      - run:
          name: Authenticate to Google Cloud
          command: |
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json

      - run: 
          name: Deploy to google endpoints (if a new branch or a new version)
          command: |
            set -o allexport
            echo -e "### Reading api version from VERSION file ..."
            source VERSION
            echo "major: $API_VERSION"
            echo "minor: $API_VERSION_MINOR"

            source .circleci/sortendpt.sh
            
            #make it available
            echo -e "\n\n### Substituting the config id [ ${GCENDPOINT_VERSION} ] in the appEngine yaml \n\n"
            envsubst < app.template.yaml > app.yaml

 
      - run:
          name: Deploy branch to google AppEngine
          #NOTE: this creates another docker container with a uWSGI app and no NGINX in front
          
          #TODO: deploy the container we build above instead to speed up deployment
          # eg. 
          # gcloud app deploy --image-url ${GCR_REPO}:${CIRCLE_BRANCH} 

          command: |
            gcloud app deploy --no-promote --version $CIRCLE_BRANCH --project ${GOOGLE_PROJECT_ID}


  deploy-prod-eu:
    working_directory: ~/circulate
    environment:
      GOOGLE_PROJECT_ID: open-targets-api-prod-eu
      GCR_REPO: eu.gcr.io/open-targets-eu-dev/rest_api
      ES_URL: http://35.195.41.74:39200
      DEPLOYED_DATA_VERSION: mkes5.2
      MAX_NUM_INSTANCES: 1
      CPU: 2
      MEMORY_GB: 2
      DISK_SIZE_GB: 30
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run: 
          name: install jq & envsubst
          command: apt-get install -y jq gettext-base && jq --version

      - run:
          name: Decode Google Cloud Credentials
          command: echo ${GOOGLE_AUTH} | base64 -i --decode > ${HOME}/gcp-key.json
      - run:
          name: Authenticate to Google Cloud
          command: |
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json

      - run: 
          name: Deploy to google endpoints (if a new branch or a new version)
          command: |
            set -o allexport
            echo -e "### Reading api version from VERSION file ..."
            source VERSION
            echo "major: $API_VERSION"
            echo "minor: $API_VERSION_MINOR"

            source .circleci/sortendpt.sh
            
            #make it available
            echo -e "\n\n### Substituting the config id [ ${GCENDPOINT_VERSION} ] in the appEngine yaml \n\n"
            envsubst < app.template.yaml > app.yaml

      - run:
          name: Deploy branch to google AppEngine (EU prod)
          command: |
            #need to define CIRCLE_TAG (see https://discuss.circleci.com/t/builds-using-git-tags-failing/14904/2)
            CIRCLE_TAG="$(git tag -l --points-at HEAD)"
            gcloud app deploy --no-promote --version $CIRCLE_TAG --project ${GOOGLE_PROJECT_ID}

  api-tests-prod-eu:
    docker:
      - image: circleci/python:2.7
    environment:
      GOOGLE_PROJECT_ID: open-targets-api-prod-eu
    working_directory: ~/circulate
    steps:
      - checkout
      - run:
          name: Install requests library
          command: |
            pip install virtualenv
            virtualenv venv
            . venv/bin/activate
            pip install -r .circleci/runscope/requirements.txt
      - run:
          name: Wait for appengine deployment
          command: |
            set -o allexport
            source VERSION
            CIRCLE_TAG="$(git tag -l --points-at HEAD)"
            DEPLOYEDURL=${CIRCLE_TAG}-dot-${GOOGLE_PROJECT_ID}.appspot.com/v${API_VERSION}/platform
            until $(curl --output /dev/null --silent --head --fail https://${DEPLOYEDURL}/public/utils/version) || (( count++ >= 10 )); do
              printf '.'
              sleep 20
            done

      - run:
          name: Trigger runscope tests on deployed branch
          command: |
            set -o allexport
            source VERSION
            CIRCLE_TAG="$(git tag -l --points-at HEAD)"
            DEPLOYEDURL=${CIRCLE_TAG}-dot-${GOOGLE_PROJECT_ID}.appspot.com
            BASEPATH=/v${API_VERSION}/platform
            . venv/bin/activate
            python .circleci/runscope/app.py "https://api.runscope.com/radar/${RUNSCOPE_TEST_UUID}/trigger?runscope_environment=${RUNSCOPE_ENV_UUID_EU_DEV}&host=${DEPLOYEDURL}&basePath=${BASEPATH}"



  deploy-prod-us:
    working_directory: ~/circulate
    environment:
      GOOGLE_PROJECT_ID: open-targets-api-prod-us
      GCR_REPO: eu.gcr.io/open-targets-eu-dev/rest_api
      ES_URL: http://10.142.0.3:9200
      DEPLOYED_DATA_VERSION: mkes5.2
      MAX_NUM_INSTANCES: 1
      CPU: 2
      MEMORY_GB: 2
      DISK_SIZE_GB: 30
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run: 
          name: install jq & envsubst
          command: apt-get install -y jq gettext-base && jq --version

      - run:
          name: Decode Google Cloud Credentials
          command: echo ${GOOGLE_AUTH} | base64 -i --decode > ${HOME}/gcp-key.json
      - run:
          name: Authenticate to Google Cloud
          command: |
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json

      - run: 
          name: Deploy to google endpoints (if a new branch or a new version)
          command: |
            set -o allexport
            echo -e "### Reading api version from VERSION file ..."
            source VERSION
            echo "major: $API_VERSION"
            echo "minor: $API_VERSION_MINOR"

            source .circleci/sortendpt.sh
            
            #make it available
            echo -e "\n\n### Substituting the config id [ ${GCENDPOINT_VERSION} ] in the appEngine yaml \n\n"
            envsubst < app.template.yaml > app.yaml

      - run:
          name: Deploy branch to google AppEngine (US prod)
          command: |
            #need to define CIRCLE_TAG (see https://discuss.circleci.com/t/builds-using-git-tags-failing/14904/2)
            CIRCLE_TAG="$(git tag -l --points-at HEAD)"
            gcloud app deploy --no-promote --version $CIRCLE_TAG --project ${GOOGLE_PROJECT_ID}
      

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      # This is really confusing: check https://circleci.com/docs/2.0/workflows/#git-tag-job-execution
      # - For a branch push unaffected by any filters, CircleCI runs the job.
      # - For a tag push unaffected by any filters, CircleCI skips the job.
      # - a job must have a filters tags section to run as a part of a tag push
      # - all its transitively dependent jobs must also have a filters tags
      # Also see https://discuss.circleci.com/t/build-required-steps-automatically-for-tag-filtered-workflows/15185
      - build:
          filters:
            tags:
              only: 
                - /^prod.*/
                - /^staging.*/
      - push-containers:
          requires:
            - build	
      - deploy:
          requires:
            - build
      - api-tests:
          requires:
            - deploy
      - deploy-staging:
          requires:
            - build
          filters:
            branches:
              only: master
            tags:
              only: /^staging.*/
      - holdprod:
          type: approval
          requires:
           - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^prod.*/

      - deploy-prod-eu:
          requires:
            - holdprod
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^prod.*/
      - deploy-prod-us:
          requires:
            - holdprod
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^prod.*/
      - api-tests-prod-eu:
          requires:
            - deploy-prod-eu
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^prod.*/
      # - api-tests-prod-us:
      #     requires:
      #       - deploy-prod-us
      #     filters:
      #       branches:
      #         ignore: /.*/
      #       tags:
      #         only: /^prod.*/


